``delma`` User Guide
------------------------------

Using ``delma`` to turn markdown into EML will require only two steps, with two optional 
steps for troubleshooting.

Create your initial markdown file
=====================================

First, you will need to have a markdown metadata file.  ``delma`` comes with a default, recommended 
one for the Atlas of Living Australia.  To generate this, simply type

.. prompt:: python

   >>> import delma
   >>> delma.create_md()

What this will do is create a file, titled ``metadata.md``, in your current directory.  If you want 
to change either the name of the metadata file, or where it is placed, you can edit the following 
two variables:

- ``metadata_md``: this will change the name of the markdown file.
- ``working_dir``: this will change where the markdown file is written.

.. note::

   If you have a template xml that you would like to use instead, ``delma`` will accept that too.  
   Just provide a link/file to the ``create_md()`` function, like so:

   .. prompt:: python

      >>> delma.create_md(xml_url="https://collections.ala.org.au/ws/eml/dr368")

Editing your markdown file
================================

Now comes the more invovled part.  We have 

.. note:: Checking your markdown file

   ``delma`` has a function where you can check if your markdown is formatted correctly, and all 
   metadata values are consistent.  To do this, run 

   .. prompt:: python

         >>> delma.display_as_dataframe(metadata_md = 'metadata.md')

   .. program-output:: python delma_user_guide/metadata_run.py

Writing your metadata file
===============================

After you have successfully edited your markdown file, it is time to write your metadata xml file.  
To do so, 

.. prompt:: python

   >>> import delma
   >>> delma.write_xml(metadata_md="metadata.md", working_dir="./", eml_xml="eml.xml")

These are all the possible arguments for ``write_xml()``.  What is shown is the default values 
for these arguments, so if you decide to go with all the defaults, you do not have to include these 
arguments.

Validating your xml file
=================================

If you are concerned about the formatting of your ``eml.xml`` file, we have an in-built function 
that will validate its formatting again a GBIF template.  To run this check, type

.. prompt:: python

   >>> delma.check_eml_xml(eml_xml="eml.xml", working_dir="./")

If it is a valid ``eml.xml``, you will not get an error message.  Various error messages will 
appear if something is not formatted correctly.